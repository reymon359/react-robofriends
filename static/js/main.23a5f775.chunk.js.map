{"version":3,"sources":["components/Card.js","components/CardList.js","components/CounterButton.js","components/Header.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","src","concat","alt","CardList","robots","map","user","i","components_Card","key","CounterButton","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","count","nextProps","nextState","_this2","color","onClick","setState","Component","Header","console","log","components_CounterButton","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","ErrorBoundary","hasError","error","info","App","onRequestRobots","_this$props","searchField","onSearchchange","isPending","filteredRobots","filter","robot","toLowerCase","includes","components_Header","components_SearchBox","components_Scroll","components_ErrorBoundary","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.23a5f775.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name, email, id}) => {\r\n\r\n    return(\r\n        <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-s'>\r\n            <img src={`https://robohash.org/${id}?size=200x200`} alt='robots' />\r\n          <div>\r\n              <h2>{name}</h2>\r\n              <p>{email}</p>\r\n          </div>\r\n        </div>\r\n    );\r\n} \r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\n\r\nconst CardList = ({robots}) => {\r\n\r\n    return(\r\n    <div>\r\n        {\r\n            robots.map((user,i)=>{\r\n                return (\r\n                <Card \r\n                    key={i} \r\n                    id={robots[i].id} \r\n                    name={robots[i].name} \r\n                    email={robots[i].email}\r\n                    />\r\n                );\r\n            })\r\n        }\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default CardList;","import React, {Component} from 'react';\r\n\r\nclass CounterButton extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {count: 1};\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    if (this.state.count !== nextState.count) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        color={this.props.color}\r\n        onClick={() => this.setState(state => ({count: state.count + 1}))}>\r\n        Count: {this.state.count}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CounterButton","import React, {Component} from 'react';\r\nimport CounterButton from './CounterButton';\r\n\r\n// In most cases, instead of writing shouldComponentUpdate()\r\n// by hand, you can inherit from React.PureComponent. It is\r\n// equivalent to implementing shouldComponentUpdate() with a\r\n// shallow comparison of current and previous props and state.\r\n\r\nclass Header extends Component {\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return false\r\n  }\r\n  render() {\r\n    console.log('header')\r\n    return (\r\n      <div>\r\n        <h1 className='f1'>RoboFriends</h1>\r\n        <CounterButton color={'red'}/>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input\r\n                aria-label='Search Robots'\r\n                className='pa3 ba b--green bg-lightest-blue'\r\n                type='search' \r\n                placeholder='search robots' \r\n                onChange={searchChange}\r\n                />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = props => {\r\n    return (\r\n        <div\r\n            style={{\r\n                overflowY: 'scroll',\r\n                border: '3px solid white',\r\n                height: '800px'\r\n            }}\r\n        >\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Scroll;\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            hasError: false\r\n        };\r\n    }\r\n\r\n    componentDidCatch(error, info) {\r\n        this.setState({ hasError: true });\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            return <h1>Ooops. That is not good</h1>;\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport Header from '../components/Header';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        searchField: state.searchRobots.searchField,\r\n        robots: state.requestRobots.robots,\r\n        isPending: state.requestRobots.isPending,\r\n        error: state.requestRobots.error\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onSearchchange: event => dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots: () => dispatch(requestRobots())\r\n    };\r\n};\r\n\r\nclass App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            count: 1\r\n        };\r\n    }\r\n    componentDidMount() {\r\n        this.props.onRequestRobots();\r\n    }\r\n\r\n    render() {\r\n        const { searchField, onSearchchange, robots, isPending } = this.props;\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n\r\n        return (\r\n            <div className=\"tc\">\r\n                <Header count={this.state.count} />\r\n                <SearchBox searchChange={onSearchchange} />\r\n                <Scroll>\r\n                    {isPending ? (\r\n                        <h1>Loading</h1>\r\n                    ) : (\r\n                        <ErrorBoundary>\r\n                            <CardList robots={filteredRobots} />\r\n                        </ErrorBoundary>\r\n                    )}\r\n                </Scroll>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nexport const setSearchField = text => ({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n});\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users').then(response =>\r\n        response\r\n            .json()\r\n            .then(data =>\r\n                dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data })\r\n            )\r\n            .catch(error =>\r\n                dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error })\r\n            )\r\n    );\r\n};\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCCESS,\r\n    REQUEST_ROBOTS_FAILED\r\n} from './constants';\r\n\r\nconst initialStateSearch = {\r\n    searchField: ''\r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n    switch (action.type) {\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({}, state, { searchField: action.payload });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst initialStateRobots = {\r\n    isPending: false,\r\n    robots: [],\r\n    error: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action = {}) => {\r\n    switch (action.type) {\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return Object.assign({}, state, { isPending: true });\r\n        case REQUEST_ROBOTS_SUCCESS:\r\n            return Object.assign({}, state, {\r\n                robots: action.payload,\r\n                isPending: false\r\n            });\r\n        case REQUEST_ROBOTS_FAILED:\r\n            return Object.assign({}, state, {\r\n                error: action.payload,\r\n                isPending: false\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger(); // MIddleware for logs\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = createStore(\r\n    rootReducer,\r\n    applyMiddleware(thunkMiddleware, logger)\r\n);\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}